// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package pg

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/pgvector/pgvector-go"
)

const createChunk = `-- name: CreateChunk :one
INSERT INTO code_chunks (symbol_name, symbol_type, file_path, start_line, end_line, content, doc, embedding, token_count, sha256)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, symbol_name, symbol_type, file_path, start_line, end_line, content, doc, embedding, token_count, sha256, created_at
`

type CreateChunkParams struct {
	SymbolName string
	SymbolType string
	FilePath   string
	StartLine  int32
	EndLine    int32
	Content    string
	Doc        pgtype.Text
	Embedding  pgvector.Vector
	TokenCount int32
	Sha256     string
}

func (q *Queries) CreateChunk(ctx context.Context, arg CreateChunkParams) (CodeChunk, error) {
	row := q.db.QueryRow(ctx, createChunk,
		arg.SymbolName,
		arg.SymbolType,
		arg.FilePath,
		arg.StartLine,
		arg.EndLine,
		arg.Content,
		arg.Doc,
		arg.Embedding,
		arg.TokenCount,
		arg.Sha256,
	)
	var i CodeChunk
	err := row.Scan(
		&i.ID,
		&i.SymbolName,
		&i.SymbolType,
		&i.FilePath,
		&i.StartLine,
		&i.EndLine,
		&i.Content,
		&i.Doc,
		&i.Embedding,
		&i.TokenCount,
		&i.Sha256,
		&i.CreatedAt,
	)
	return i, err
}

type CreateChunksParams struct {
	SymbolName string
	SymbolType string
	FilePath   string
	StartLine  int32
	EndLine    int32
	Content    string
	Doc        pgtype.Text
	Embedding  pgvector.Vector
	TokenCount int32
	Sha256     string
}
